#pragma once

#include <CL/cl.h>
#include <glib.h>

typedef struct property {
  gboolean enabled;
  char *name;
} property;

// clang-format off
GArray*          deviceAffinityDomain(cl_device_id device);
GArray*          deviceAtomicMemoryCapabilities(cl_device_id device);
GArray*          deviceAtomicFenceCapabilities(cl_device_id device);
GArray*          deviceDoubleFPConfig(cl_device_id device);
GArray*          deviceEnqueueCapabilities(cl_device_id device);
GArray*          deviceExecCapabilities(cl_device_id device);
GArray*          deviceLocalMemType(cl_device_id device);
GArray*          deviceMemCacheType(cl_device_id device);
GArray*          devicePartitionType(cl_device_id device);
GArray*          devicePartitionProperties(cl_device_id device);
GArray*          deviceSingleFPConfig(cl_device_id device);
GArray*          deviceSVMCapabilities(cl_device_id device);
GArray*          deviceQueueOnDeviceProperties(cl_device_id device);
GArray*          deviceQueueOnHostProperties(cl_device_id device);
GArray*          deviceTypes(cl_device_id device);
char*            deviceDriverVersion(cl_device_id device);
char*            deviceIlVersion(cl_device_id device);
char*            deviceLatestConformanceVersionPassed(cl_device_id device);
char*            deviceName(cl_device_id device);
char*            deviceProfile(cl_device_id device);
char*            deviceVendor(cl_device_id device);
char*            deviceVersion(cl_device_id device);
cl_device_id     deviceParentId(cl_device_id device);
cl_name_version* deviceBuiltInKernels(cl_device_id device, size_t *numBuiltInKernels);
cl_name_version* deviceExtensionsWithVersion(cl_device_id device, size_t *numDeviceExtensions);
cl_name_version* deviceIlsWithVersion(cl_device_id device, size_t *numIls);
cl_name_version* deviceOpenClCAllVersions(cl_device_id device, size_t *numC);
cl_name_version* deviceOpenClCFeatures(cl_device_id device, size_t *numCFeatures);
cl_platform_id   devicePlatform(cl_device_id device);
cl_uint          deviceAddressBits(cl_device_id device);
cl_uint          deviceAvailable(cl_device_id device);
cl_uint          deviceCompilerAvailable(cl_device_id device);
cl_uint          deviceEndianLittle(cl_device_id device);
cl_uint          deviceErrorCorrectionSupport(cl_device_id device);
cl_uint          deviceGenericAddressSpaceSupport(cl_device_id device);
cl_uint          deviceGlobalMemCachelineSize(cl_device_id device);
cl_uint          deviceImageBaseAddressAlignment(cl_device_id device);
cl_uint          deviceImagePitchAlignment(cl_device_id device);
cl_uint          deviceImageSupport(cl_device_id device);
cl_uint          deviceLinkerAvailable(cl_device_id device);
cl_uint          deviceMaxClockFrequency(cl_device_id device);
cl_uint          deviceMaxComputeUnits(cl_device_id device);
cl_uint          deviceMaxConstantArgs(cl_device_id device);
cl_uint          deviceMaxNumSubGroups(cl_device_id device);
cl_uint          deviceMaxOnDeviceEvents(cl_device_id device);
cl_uint          deviceMaxOnDeviceQueues(cl_device_id device);
cl_uint          deviceMaxPipeArgs(cl_device_id device);
cl_uint          deviceMaxReadImageArgs(cl_device_id device);
cl_uint          deviceMaxReadWriteImageArgs(cl_device_id device);
cl_uint          deviceMaxSamplers(cl_device_id device);
cl_uint          deviceMaxWorkItemDimensions(cl_device_id device);
cl_uint          deviceMaxWriteImageArgs(cl_device_id device);
cl_uint          deviceMemBaseAddrAlign(cl_device_id device);
cl_uint          deviceNativeVectorWidthChar(cl_device_id device);
cl_uint          deviceNativeVectorWidthDouble(cl_device_id device);
cl_uint          deviceNativeVectorWidthFloat(cl_device_id device);
cl_uint          deviceNativeVectorWidthHalf(cl_device_id device);
cl_uint          eviceNativeVectorWidthInt(cl_device_id device);
cl_uint          eviceNativeVectorWidthLong(cl_device_id device);
cl_uint          eviceNativeVectorWidthShort(cl_device_id device);
cl_uint          eviceNonUniformWorkGroupSupport(cl_device_id device);
cl_uint          deviceNumericVersion(cl_device_id device);
cl_uint          devicePartitionMaxSubDevices(cl_device_id device);
cl_uint          devicePipeMaxActiveReservations(cl_device_id device);
cl_uint          devicePipeMaxPacketSize(cl_device_id device);
cl_uint          devicePipeSupport(cl_device_id device);
cl_uint          devicePreferredGlobalAtomicAlignment(cl_device_id device);
cl_uint          devicePreferredInteropUserSync(cl_device_id device);
cl_uint          devicePreferredLocalAtomicAlignment(cl_device_id device);
cl_uint          devicePreferredPlatformAtomicAlignment(cl_device_id device);
cl_uint          devicePreferredVectorWidthChar(cl_device_id device);
cl_uint          devicePreferredVectorWidthDouble(cl_device_id device);
cl_uint          devicePreferredVectorWidthFloat(cl_device_id device);
cl_uint          devicePreferredVectorWidthHalf(cl_device_id device);
cl_uint          devicePreferredVectorWidthInt(cl_device_id device);
cl_uint          devicePreferredVectorWidthLong(cl_device_id device);
cl_uint          devicePreferredVectorWidthShort(cl_device_id device);
cl_uint          deviceQueueOnDeviceMaxSize(cl_device_id device);
cl_uint          deviceQueueOnDevicePreferredSize(cl_device_id device);
cl_uint          deviceReferenceCount(cl_device_id device);
cl_uint          deviceSubGroupIndependentForwardProgress(cl_device_id device);
cl_uint          deviceVendorID(cl_device_id device);
cl_uint          deviceWorkGroupCollectiveFunctionsSupport(cl_device_id device);
size_t*          deviceMaxWorkItemSizes(cl_device_id device, size_t *numDims);
size_t           deviceGlobalVariablePreferredTotalSize(cl_device_id device);
size_t           deviceImage2dMaxHeight(cl_device_id device);
size_t           deviceImage2dMaxWidth(cl_device_id device);
size_t           deviceImage3dMaxDepth(cl_device_id device);
size_t           deviceImage3dMaxHeight(cl_device_id device);
size_t           deviceImage3dmaxWidth(cl_device_id device);
size_t           deviceImageMaxArraySize(cl_device_id device);
size_t           deviceImageMaxBufferSize(cl_device_id device);
size_t           deviceMaxGlobalVariableSize(cl_device_id device);
size_t           deviceMaxParameterSize(cl_device_id device);
size_t           deviceMaxWorkGroupSize(cl_device_id device);
size_t           devicePreferredWorkGroupSizeMultiple(cl_device_id device);
size_t           devicePrintfBufferSize(cl_device_id device);
size_t           deviceProfilingTimerResolution(cl_device_id device);
cl_ulong         deviceMaxMemAllocSize(cl_device_id device);
cl_ulong         deviceGlobalMemCacheSize(cl_device_id device);
cl_ulong         deviceGlobalMemSize(cl_device_id device);
cl_ulong         deviceMaxConstantBufferSize(cl_device_id device);
cl_ulong         deviceLocalMemSize(cl_device_id device);
